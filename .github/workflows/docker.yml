name: Docker CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Debug step to check if secrets are available (will be masked in logs)
      - name: Check if secrets exist
        run: |
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "AWS_ACCESS_KEY_ID is set"
          else
            echo "AWS_ACCESS_KEY_ID is not set"
          fi
          if [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "AWS_SECRET_ACCESS_KEY is set"
          else
            echo "AWS_SECRET_ACCESS_KEY is not set"
          fi

      # Build and test
      - name: Build Docker image for testing
        run: docker build -t anshultaklikar/docker-react -f Dockerfile.dev .

      - name: Run tests
        run: docker run -e CI=true anshultaklikar/docker-react npm run test -- --coverage

      # Build production image
      - name: Build production Docker image
        run: docker build -t anshultaklikar/docker-react .

      # Try alternative AWS credentials configuration
      - name: Configure AWS Credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region=ap-south-1" > ~/.aws/credentials
          
          echo "[default]
          region=ap-south-1" > ~/.aws/config
          
          # Verify AWS configuration
          aws sts get-caller-identity

      # Create deployment package
      - name: Generate deployment package
        run: zip -r deploy.zip .

      # Upload to S3
      - name: Upload to S3
        run: |
          aws s3 cp deploy.zip s3://elasticbeanstalk-ap-south-1-798114842310/deploy-${{ github.sha }}.zip

      # Deploy to Elastic Beanstalk with error checking
      - name: Deploy to AWS Elastic Beanstalk
        run: |
          # Verify application exists
          echo "Verifying application..."
          if ! aws elasticbeanstalk describe-applications --application-names "docker-react" > /dev/null 2>&1; then
            echo "Application 'docker-react' not found. Creating it..."
            aws elasticbeanstalk create-application --application-name "docker-react"
          fi

          # Verify environment exists
          echo "Verifying environment..."
          if ! aws elasticbeanstalk describe-environments --application-name "docker-react" --environment-names "Docker-react-env" --include-deleted=false | grep -q "Docker-react-env"; then
            echo "Environment 'Docker-react-env' not found. Please check environment name"
            exit 1
          fi

          echo "Creating application version..."
          aws elasticbeanstalk create-application-version \
            --application-name "docker-react" \
            --version-label "docker-react-${{ github.sha }}" \
            --description "Deployment from GitHub Actions" \
            --source-bundle S3Bucket="elasticbeanstalk-ap-south-1-798114842310",S3Key="deploy-${{ github.sha }}.zip" \
            --auto-create-application

          echo "Waiting for application version to be processed..."
          sleep 10

          echo "Updating environment..."
          aws elasticbeanstalk update-environment \
            --application-name "docker-react" \
            --environment-name "Docker-react-env" \
            --version-label "docker-react-${{ github.sha }}"

          echo "Waiting for environment to start updating..."
          sleep 5

          # Monitor deployment status
          echo "Monitoring deployment status..."
          while true; do
            STATUS=$(aws elasticbeanstalk describe-environments \
              --application-name "docker-react" \
              --environment-names "Docker-react-env" \
              --query "Environments[0].Status" \
              --output text)
            
            HEALTH=$(aws elasticbeanstalk describe-environments \
              --application-name "docker-react" \
              --environment-names "Docker-react-env" \
              --query "Environments[0].Health" \
              --output text)
            
            echo "Current status: $STATUS, Health: $HEALTH"
            
            if [ "$STATUS" = "Ready" ]; then
              if [ "$HEALTH" = "Green" ]; then
                echo "Deployment successful!"
                break
              elif [ "$HEALTH" = "Red" ]; then
                echo "Deployment failed - environment is in Red health status"
                exit 1
              fi
            elif [ "$STATUS" = "Failed" ]; then
              echo "Deployment failed"
              exit 1
            fi
            
            sleep 10
          done