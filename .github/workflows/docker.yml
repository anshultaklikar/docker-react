name: Docker CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Previous steps remain the same until the Deploy step
      - name: Check if secrets exist
        run: |
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "AWS_ACCESS_KEY_ID is set"
          else
            echo "AWS_ACCESS_KEY_ID is not set"
          fi
          if [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "AWS_SECRET_ACCESS_KEY is set"
          else
            echo "AWS_SECRET_ACCESS_KEY is not set"
          fi

      - name: Build Docker image for testing
        run: docker build -t anshultaklikar/docker-react -f Dockerfile.dev .

      - name: Run tests
        run: docker run -e CI=true anshultaklikar/docker-react npm run test -- --coverage

      - name: Build production Docker image
        run: docker build -t anshultaklikar/docker-react .

      - name: Configure AWS Credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region=ap-south-1" > ~/.aws/credentials
          
          echo "[default]
          region=ap-south-1" > ~/.aws/config
          
          aws sts get-caller-identity

      - name: Generate deployment package
        run: zip -r deploy.zip .

      - name: Upload to S3
        run: |
          aws s3 cp deploy.zip s3://elasticbeanstalk-ap-south-1-798114842310/deploy-${{ github.sha }}.zip

      # Updated Deploy step with launch template support
      - name: Deploy to AWS Elastic Beanstalk
        run: |
          # Function to check environment status
          check_env_status() {
            aws elasticbeanstalk describe-environments \
              --application-name "docker-react" \
              --environment-names "Docker-react-env" \
              --query "Environments[0].Status" \
              --output text
          }

          # Function to wait for environment to be ready
          wait_for_environment() {
            echo "Waiting for environment to be ready..."
            while true; do
              STATUS=$(check_env_status)
              echo "Current environment status: $STATUS"
              if [ "$STATUS" = "Ready" ]; then
                break
              elif [ "$STATUS" = "Terminated" ] || [ "$STATUS" = "Terminating" ]; then
                echo "Environment is terminated or terminating. Creating new environment..."
                return 1
              fi
              echo "Waiting 30 seconds before checking again..."
              sleep 30
            done
            return 0
          }

          # Create or update launch template
          echo "Creating/updating launch template..."
          TEMPLATE_NAME="docker-react-template"
          
          # Get latest Amazon Linux 2 AMI ID for your region
          AMI_ID=$(aws ec2 describe-images \
            --owners amazon \
            --filters "Name=name,Values=amzn2-ami-hvm-*-x86_64-gp2" \
            --query "sort_by(Images, &CreationDate)[-1].ImageId" \
            --output text)

          # Create or update launch template
          aws ec2 create-launch-template-version \
            --launch-template-name "$TEMPLATE_NAME" \
            --version-description "Version for Elastic Beanstalk" \
            --launch-template-data "{
              \"ImageId\": \"$AMI_ID\",
              \"InstanceType\": \"t2.micro\",
              \"IamInstanceProfile\": {
                \"Name\": \"aws-elasticbeanstalk-ec2-role\"
              },
              \"UserData\": \"$(echo -n '#!/bin/bash\necho "Launch template user data"' | base64 -w 0)\"
            }" \
            --no-cli-pager || \
          aws ec2 create-launch-template \
            --launch-template-name "$TEMPLATE_NAME" \
            --version-description "Version for Elastic Beanstalk" \
            --launch-template-data "{
              \"ImageId\": \"$AMI_ID\",
              \"InstanceType\": \"t2.micro\",
              \"IamInstanceProfile\": {
                \"Name\": \"aws-elasticbeanstalk-ec2-role\"
              },
              \"UserData\": \"$(echo -n '#!/bin/bash\necho "Launch template user data"' | base64 -w 0)\"
            }" \
            --no-cli-pager

          # Get launch template ID
          TEMPLATE_ID=$(aws ec2 describe-launch-templates \
            --launch-template-names "$TEMPLATE_NAME" \
            --query "LaunchTemplates[0].LaunchTemplateId" \
            --output text)

          # Verify application exists
          echo "Verifying application..."
          if ! aws elasticbeanstalk describe-applications --application-names "docker-react" > /dev/null 2>&1; then
            echo "Application 'docker-react' not found. Creating it..."
            aws elasticbeanstalk create-application --application-name "docker-react"
          fi

          # Check if environment exists
          ENV_EXISTS=$(aws elasticbeanstalk describe-environments \
            --application-name "docker-react" \
            --environment-names "Docker-react-env" \
            --no-include-deleted \
            --query "length(Environments)" \
            --output text)

          if [ "$ENV_EXISTS" = "0" ]; then
            echo "Creating new environment with launch template..."
            aws elasticbeanstalk create-environment \
              --application-name "docker-react" \
              --environment-name "Docker-react-env" \
              --solution-stack-name "64bit Amazon Linux 2 v3.5.9 running Docker" \
              --option-settings "[
                {
                  \"Namespace\": \"aws:autoscaling:launchconfiguration\",
                  \"OptionName\": \"LaunchTemplateId\",
                  \"Value\": \"$TEMPLATE_ID\"
                },
                {
                  \"Namespace\": \"aws:elasticbeanstalk:environment\",
                  \"OptionName\": \"ServiceRole\",
                  \"Value\": \"aws-elasticbeanstalk-service-role\"
                },
                {
                  \"Namespace\": \"aws:autoscaling:asg\",
                  \"OptionName\": \"MinSize\",
                  \"Value\": \"1\"
                },
                {
                  \"Namespace\": \"aws:autoscaling:asg\",
                  \"OptionName\": \"MaxSize\",
                  \"Value\": \"1\"
                }
              ]"
          fi

          # Wait for environment to be ready
          wait_for_environment

          echo "Creating application version..."
          aws elasticbeanstalk create-application-version \
            --application-name "docker-react" \
            --version-label "docker-react-${{ github.sha }}" \
            --description "Deployment from GitHub Actions" \
            --source-bundle S3Bucket="elasticbeanstalk-ap-south-1-798114842310",S3Key="deploy-${{ github.sha }}.zip" \
            --auto-create-application

          echo "Waiting for application version to be processed..."
          sleep 30

          echo "Updating environment..."
          aws elasticbeanstalk update-environment \
            --application-name "docker-react" \
            --environment-name "Docker-react-env" \
            --version-label "docker-react-${{ github.sha }}"